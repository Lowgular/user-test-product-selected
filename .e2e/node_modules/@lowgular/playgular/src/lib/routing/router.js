"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const tslib_1 = require("tslib");
const matchers_1 = require("../matchers");
const visit_1 = require("./visit");
class Router {
    constructor(page, appBaseUrl) {
        this.page = page;
        this.appBaseUrl = appBaseUrl;
    }
    refresh() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.page.reload();
        });
    }
    waitForUrl(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.waitForURL)(this.page, (0, matchers_1.coerceRegexp)(url));
        });
    }
    navigate(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.goTo)(this.page, this.appBaseUrl + url);
        });
    }
    navigateFullUrl(fullUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.goTo)(this.page, fullUrl);
        });
    }
    navigateAndWait(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.goToAndWait)(this.page, this.appBaseUrl + url);
        });
    }
    navigateAndWaitFullUrl(fullUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.goToAndWait)(this.page, fullUrl);
        });
    }
    expectUrl(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.expectUrlRegexp)(this.page, (0, matchers_1.coerceRegexp)(url, false), this.appBaseUrl);
        });
    }
    expectFullUrl(fullUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.expectUrlRegexp)(this.page, (0, matchers_1.coerceRegexp)(fullUrl, false));
        });
    }
    expectAndWaitForUrl(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.waitForURL)(this.page, (0, matchers_1.coerceRegexp)(url, false));
            yield (0, visit_1.expectUrlRegexp)(this.page, (0, matchers_1.coerceRegexp)(url, false), this.appBaseUrl);
        });
    }
    expectAndWaitForFullUrl(fullUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, visit_1.waitForURL)(this.page, (0, matchers_1.coerceRegexp)(fullUrl, false));
            yield (0, visit_1.expectUrlRegexp)(this.page, (0, matchers_1.coerceRegexp)(fullUrl, false));
        });
    }
    expectGuardRedirect(fromRoute, toRoute) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (fromRoute.toLowerCase() === toRoute.toLocaleLowerCase()) {
                throw new Error('Parameters: fromRoute and toRoute must not be identical');
            }
            yield this.navigate(fromRoute);
            yield this.expectAndWaitForUrl(toRoute);
        });
    }
}
exports.Router = Router;
//# sourceMappingURL=router.js.map