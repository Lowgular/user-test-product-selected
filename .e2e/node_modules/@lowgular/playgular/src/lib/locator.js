// import { Locator, Page } from '@playwright/test';
// import { StringOrRegExp, isRegExp } from './data';
// import {
//   CheckboxGroupFormControl,
//   ContainerElement,
//   ListElement,
//   RadioGroupFormControl,
//   SimpleElement,
//   TableRow,
// } from './elements';
// import { coerceRegexp } from './matchers';
// export type LocatorOrPage = Locator | Page;
// export type ElementSelector =
//   | StringOrRegExp
//   | { value: StringOrRegExp; type: SELECTOR_TYPES };
// export type LocatorGetter = (
//   locator: LocatorOrPage,
//   text: StringOrRegExp
// ) => Locator;
// export enum SELECTOR_TYPES {
//   TEST_ID = 'TEST_ID',
//   CSS = 'CSS',
//   TEXT = 'TEXT',
//   BUTTON_ROLE = 'BUTTON_ROLE',
//   PLACEHOLDER = 'PLACEHOLDER',
//   ALT = 'ALT',
//   LABEL = 'LABEL',
// }
// export const cssSelector = (selector: string): ElementSelector => ({
//   type: SELECTOR_TYPES.CSS,
//   value: selector,
// });
// export const textSelector = (text: StringOrRegExp): ElementSelector => ({
//   type: SELECTOR_TYPES.TEXT,
//   value: text,
// });
// export const buttonRoleSelector = (
//   selector: StringOrRegExp
// ): ElementSelector => ({
//   type: SELECTOR_TYPES.BUTTON_ROLE,
//   value: selector,
// });
// export const placeholderSelector = (
//   placeholder: StringOrRegExp
// ): ElementSelector => ({
//   type: SELECTOR_TYPES.PLACEHOLDER,
//   value: placeholder,
// });
// export const altSelector = (alt: StringOrRegExp): ElementSelector => ({
//   type: SELECTOR_TYPES.ALT,
//   value: alt,
// });
// export const labelSelector = (label: StringOrRegExp): ElementSelector => ({
//   type: SELECTOR_TYPES.LABEL,
//   value: label,
// });
// const isElementSelectorObject = (data: any): boolean =>
//   'value' in data && 'type' in data;
// export const isElementSelector = (data: any): boolean =>
//   typeof data === 'string' || isElementSelectorObject(data);
// export const getElement = (
//   parent: LocatorOrPage,
//   selector: ElementSelector
// ) => {
//   const selectorTypeMap: Record<SELECTOR_TYPES, LocatorGetter> = {
//     [SELECTOR_TYPES.TEST_ID]: getElementByTestId,
//     [SELECTOR_TYPES.CSS]: getElementBySelector,
//     [SELECTOR_TYPES.TEXT]: getElementByText,
//     [SELECTOR_TYPES.BUTTON_ROLE]: getElementByButtonRole,
//     [SELECTOR_TYPES.PLACEHOLDER]: getElementByPlaceholder,
//     [SELECTOR_TYPES.ALT]: getElementByAltText,
//     [SELECTOR_TYPES.LABEL]: getElementByLabel,
//   };
//   if (isElementSelectorObject(selector)) {
//     return selectorTypeMap[(selector as any).type as SELECTOR_TYPES](
//       parent,
//       (selector as any).value
//     );
//   } else {
//     return getElementByTestId(parent, selector as StringOrRegExp);
//   }
// };
// const getElementByLabel: LocatorGetter = (
//   locator: LocatorOrPage,
//   selector: StringOrRegExp
// ) => {
//   return locator.getByLabel(selector);
// };
// const getElementByAltText: LocatorGetter = (
//   locator: LocatorOrPage,
//   selector: StringOrRegExp
// ) => {
//   return locator.getByAltText(selector);
// };
// const getElementBySelector: LocatorGetter = (
//   locator: LocatorOrPage,
//   selector: StringOrRegExp
// ) => {
//   if (isRegExp(selector)) {
//     throw new Error('Cannot getElementBySelector with RegExp');
//   }
//   return locator.locator(selector as string);
// };
// const getElementByPlaceholder: LocatorGetter = (
//   locator: LocatorOrPage,
//   placeholder: StringOrRegExp
// ) => {
//   const element = locator.getByPlaceholder(placeholder);
//   return element;
// };
// const getElementByText: LocatorGetter = (
//   locator: LocatorOrPage,
//   text: StringOrRegExp
// ) => {
//   const element = locator.getByText(coerceRegexp(text));
//   return element;
// };
// const getElementByButtonRole = (locator: LocatorOrPage, text: StringOrRegExp) =>
//   locator.getByRole('button', { name: coerceRegexp(text) });
// const getElementByTestId: LocatorGetter = (
//   locator: LocatorOrPage,
//   testId: StringOrRegExp
// ) => {
//   const element = locator.getByTestId(testId);
//   return element;
// };
// export interface Constructable<T> {
//   new (...args: any[]): T;
// }
// export class ElementLocator {
//   constructor(private parent: Locator) {}
//   locateChild<T extends SimpleElement>(
//     klass: Constructable<T>,
//     selector: ElementSelector
//   ) {
//     return new klass(getElement(this.parent, selector));
//   }
//   locateGroupControl<
//     T extends RadioGroupFormControl | CheckboxGroupFormControl
//   >(
//     groupControlClass: Constructable<T>,
//     selector: ElementSelector,
//     parentSelector?: ElementSelector
//   ): T {
//     const parent =
//       parentSelector !== undefined
//         ? getElement(this.parent, parentSelector)
//         : this.parent;
//     return new groupControlClass(
//       getElement(parent, selector),
//       this.locateList(ContainerElement, cssSelector('label'))
//     );
//   }
//   locateList<T extends SimpleElement>(
//     klass: Constructable<T>,
//     itemSelector: ElementSelector
//   ) {
//     return new ListElement<T>(this.parent, async (listLocator: Locator) =>
//       (await getElement(listLocator, itemSelector).all()).map(
//         (locator) => new klass(locator)
//       )
//     );
//   }
//   locateTableRows<T extends SimpleElement>(
//     columnClass: Constructable<T>,
//     selector: ElementSelector
//   ) {
//     return new ListElement<TableRow<T>>(this.parent, async (listLocator) =>
//       (await getElement(listLocator, selector).all()).map(
//         (locator) =>
//           new TableRow(
//             locator,
//             (rowLocator) =>
//               new ListElement<T>(rowLocator, async (locator) => {
//                 const columns = await getElement(
//                   locator,
//                   cssSelector('th, td')
//                 ).all();
//                 return columns.map((locator) => new columnClass(locator));
//               })
//           )
//       )
//     );
//   }
// }
//# sourceMappingURL=locator.js.map