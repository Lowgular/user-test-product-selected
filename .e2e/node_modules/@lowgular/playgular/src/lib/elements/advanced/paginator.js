"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// export class PaginateToLastFeature {
//   constructor(private paginator: PaginatorElement) {}
//   async goToLast(callBack: (index: number) => Promise<void>) {
//     let i = 0;
//     while ((await this.paginator.isLast()) === false) {
//       await this.paginator.goToNext();
//       await callBack(i);
//       i++;
//     }
//   }
// }
// export class PaginatorElement {
//   private currentPage = 1;
//   constructor(
//     private prev: DisableableElement,
//     private next: DisableableElement,
//     private pages: ListElement<SelectableElement>
//   ) {}
//   async goToNext() {
//     await this.next.click();
//     this.currentPage++;
//   }
//   async goToPrev() {
//     if (this.currentPage === 1) {
//       throw new Error(`Pagination clickPrev cannot happen on page 1`);
//     }
//     await this.prev.click();
//     this.currentPage--;
//   }
//   async isLast() {
//     return await this.next.isDisabled();
//   }
//   async expectState(state: PaginatorState) {
//     expect(await this.getState()).toEqual(state);
//     const selectedPage = await this.getSelectedPage();
//     expect(await selectedPage.getContentOrThrow()).toMatch(
//       coerceRegexp(this.currentPage.toString())
//     );
//   }
//   private async getSelectedPage(): Promise<SelectableElement> {
//     return await this.pages.findOrThrow(async (page: SelectableElement) => {
//       const txt = await page.getContent();
//       return await page.isSelected();
//     });
//   }
//   private async getState(): Promise<PaginatorState> {
//     return {
//       currentPage: this.currentPage,
//       prev: {
//         isDisabled: await this.prev.isDisabled(),
//       },
//       next: {
//         isDisabled: await this.next.isDisabled(),
//       },
//     };
//   }
// }
// export const makePaginator = (
//   parent: LocatorOrPage,
//   nextSelector: ElementSelector,
//   prevSelector: ElementSelector
// ) =>
//   new PaginatorElement(
//     makeButtonElement(parent, prevSelector),
//     makeButtonElement(parent, nextSelector)
//   );
//# sourceMappingURL=paginator.js.map