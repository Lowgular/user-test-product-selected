// import { StringOrRegExp } from '../data';
// import { SimpleElement } from './atoms';
// import { ContainerElement } from './container';
// import { ListElement } from './list';
// export const findOrThrow = async <T>(
//   allItems: T[],
//   callBack: (child: T, index: number) => Promise<boolean>
// ): Promise<T> => {
//   for (let i = 0; i < allItems.length; i++) {
//     const isFound = await callBack(allItems[i], i);
//     if (isFound) {
//       return allItems[i];
//     }
//   }
//   throw new Error(`Item not found`);
// };
// export const forEach = async <T>(
//   allItems: T[],
//   callBack: (child: T, index: number) => Promise<void>
// ) => {
//   for (let i = 0; i < allItems.length; i++) {
//     await callBack(allItems[i], i);
//   }
// };
// export const filter = async <T>(
//   allItems: T[],
//   callBack: (child: T, index: number) => Promise<boolean>
// ): Promise<T[]> => {
//   const filteredItems = [] as T[];
//   for (let i = 0; i < allItems.length; i++) {
//     const isFound = await callBack(allItems[i], i);
//     if (isFound) {
//       filteredItems.push(allItems[i]);
//     }
//   }
//   return filteredItems;
// };
// export const findElementByLabel = async <T extends SimpleElement>(
//   label: StringOrRegExp,
//   elements: T[],
//   labelList: ListElement<ContainerElement>
// ) => {
//   const labelElement = await labelList.findOrThrow(
//     async (l) => await l.hasContent(label)
//   );
//   const forValue = await labelElement.getAttribute('for');
//   const element = await findOrThrow(
//     elements,
//     async (e) => (await e.getAttribute('id')) === forValue
//   );
//   return element;
// };
//# sourceMappingURL=utils.js.map