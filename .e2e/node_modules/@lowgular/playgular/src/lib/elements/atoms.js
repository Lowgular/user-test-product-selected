"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonElement = exports.TextElement = exports.SimpleElement = exports.getLocatorTagName = void 0;
const tslib_1 = require("tslib");
const matchers_1 = require("../matchers");
const getLocatorTagName = (locator) => locator.evaluate((el) => el.tagName.toLowerCase());
exports.getLocatorTagName = getLocatorTagName;
class SimpleElement {
    constructor(locator) {
        this.locator = locator;
    }
    // get screenshooter() {
    //   return new Screenshooter(this.locator);
    // }
    // get pageScreenshooter() {
    //   return new Screenshooter(this.locator.page());
    // }
    get handle() {
        return this.locator.elementHandle();
    }
    getComputedStyle() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.locator.evaluate((el) => {
                return window.getComputedStyle(el);
            });
        });
    }
    getBoundingBox() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.locator.boundingBox();
        });
    }
    hover() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.locator.hover();
        });
    }
    // @todo add more params - modifiers, buttons etc.
    click() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.locator.click();
        });
    }
    clickOnPosition(x, y) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.locator.click({ position: { x, y } });
        });
    }
    doubleClick() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.locator.dblclick();
        });
    }
    dispatchEvent(type, eventInit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.locator.dispatchEvent(type, eventInit);
        });
    }
    getAttribute(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.locator.getAttribute(name);
        });
    }
    hasAttribute(name_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (name, doesExist = true) {
            const attributeVal = yield this.getAttribute(name);
            return doesExist === true ? attributeVal !== null : attributeVal === null;
        });
    }
    // async expectHasAttribute(name: string, doesExist = true): Promise<void> {
    //   expect(await this.hasAttribute(name)).toEqual(doesExist);
    // }
    isVisible() {
        return tslib_1.__awaiter(this, arguments, void 0, function* (value = true) {
            return (yield this.locator.isVisible()) === value;
        });
    }
}
exports.SimpleElement = SimpleElement;
// export class ImageElement extends SimpleElement {
//   async expectContent(content: StringOrRegExp) {
//     await expectImageSource(this.locator, content);
//   }
//   async hasContent(content: StringOrRegExp): Promise<boolean> {
//     return await hasImageSource(this.locator, content);
//   }
//   async getContent(): Promise<string | null> {
//     return await this.getAttribute('src');
//   }
// }
class TextElement extends SimpleElement {
    getContent() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.locator.textContent();
        });
    }
    getContentOrThrow() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const content = yield this.getContent();
            if (content === null) {
                throw new Error('Element does not have content');
            }
            return content;
        });
    }
    hasContent(content) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const actualContent = yield this.getContent();
            return (actualContent !== null &&
                actualContent.match((0, matchers_1.coerceRegexp)(content)) !== null);
        });
    }
}
exports.TextElement = TextElement;
class ButtonElement extends TextElement {
    isDisabled() {
        return tslib_1.__awaiter(this, arguments, void 0, function* (value = true) {
            return (yield this.hasAttribute('disabled')) === value;
        });
    }
    pressEnter() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.locator.press('Enter');
        });
    }
    getContent() {
        const _super = Object.create(null, {
            getContent: { get: () => super.getContent }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const valueAttr = yield this.getAttribute('value');
            if (valueAttr !== null) {
                return valueAttr;
            }
            return yield _super.getContent.call(this);
        });
    }
}
exports.ButtonElement = ButtonElement;
// const expectImageSource = async (element: Locator, source: StringOrRegExp) => {
//   const value = await element.getAttribute('src');
//   expect(value).toMatch(coerceRegexp(source));
// };
// const hasImageSource = async (element: Locator, source: StringOrRegExp) => {
//   const attr = await element.getAttribute('src');
//   return attr !== null && attr.match(coerceRegexp(source)) !== null;
// };
//# sourceMappingURL=atoms.js.map