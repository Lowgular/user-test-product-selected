// import { Locator, expect } from '@playwright/test';
// import { SimpleElement } from './atoms';
// import { ListElement } from './list';
// export class TableRow<T extends SimpleElement> extends SimpleElement {
//   constructor(
//     locator: Locator,
//     protected readonly getColumnList: (parent: Locator) => ListElement<T>
//   ) {
//     super(locator);
//   }
//   async forEachColumn(callBack: (child: T, index: number) => Promise<void>) {
//     const allItems = await this.getColumnList(this.locator);
//     await allItems.forEachChild(callBack);
//   }
//   async findOrThrow(
//     callBack: (child: T, index: number) => Promise<boolean>
//   ): Promise<T> {
//     const allItems = await this.getColumnList(this.locator);
//     return await allItems.findOrThrow(callBack);
//   }
//   async getNthColumn(index: number): Promise<T> {
//     const columnList = await this.getColumnList(this.locator);
//     return await columnList.getNthElement(index);
//   }
//   async length() {
//     const allItems = await this.getColumnList(this.locator);
//     return await allItems.length();
//   }
//   async expectToHaveLength(length: number) {
//     expect(await this.length()).toEqual(length);
//   }
// }
// // export class TableElement<H extends SimpleElement, R extends SimpleElement> {
// //   constructor(
// //     protected readonly parent: Locator,
// //     protected readonly getHeaders: (parent: Locator) => Promise<ListElement<H>>,
// //     protected readonly getRows: (parent: Locator) => Promise<ListElement<R>>
// //   ) {}
// // }
// //   async expectContent(content: {
// //     headerModels: ExpectModel[];
// //     rowModels: ExpectModel[];
// //   }): Promise<void> {
// //     await this.expectContentForEachHeader(content.headerModels);
// //     await this.expectContentForEachRow(content.rowModels);
// //   }
// //   async expectContentForEachHeader(expectModels: ExpectModel[]) {
// //     const headerList = this.getHeaders(this.parent);
// //     // await headerList.expectExactContent(expectModels);
// //   }
// //   async expectContentForEachRow(expectModels: ExpectModel[]) {
// //     const allRows = await this.getRows(this.parent);
// //     for (let i = 0; i < allRows.length; i++) {
// //       const currentRow = await allRows[i];
// //       // await currentRow.expectExactContent(expectModels);
// //     }
// //   }
// // }
// // export const makeTable = (
// //   parent: LocatorOrPage,
// //   tableSelector: ElementSelector,
// //   headerMapper: (locator: Locator) => any,
// //   rowColumnMapper: (locator: Locator) => any
// // ) =>
// //   new TableElement(
// //     getElement(parent, tableSelector),
// //     (parent) =>
// //       makeList(parent, cssSelector('thead'), cssSelector('th'), headerMapper),
// //     (parent: Locator) =>
// //       getManyElements(
// //         parent,
// //         cssSelector('tbody > tr'),
// //         (trLocator) =>
// //           new ListElement(trLocator, (trLocator: Locator) =>
// //             getManyElements(trLocator, cssSelector('td'), rowColumnMapper)
// //           )
// //       )
// //   );
// // export const expectTableShouldHaveInnerTexts = async (
// //   headerLocator: Locator,
// //   rowLocator: Locator,
// //   headerContent: string[],
// //   rowContent: string[][]
// // ) => {
// //   await expectListShouldHaveInnerTexts(headerLocator, headerContent);
// //   for (let i = 0; i < rowContent.length; i++) {
// //     const cells = await rowLocator.nth(i).locator('td'); // Hardcoded
// //     await expectListShouldHaveInnerTexts(cells, rowContent[i]);
// //   }
// // };
//# sourceMappingURL=table.js.map