"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescriptionList = exports.DescriptionTerm = void 0;
const tslib_1 = require("tslib");
const atoms_1 = require("./atoms");
class DescriptionTerm extends atoms_1.TextElement {
    constructor(locator, listLocator, index) {
        super(locator);
        this.listLocator = listLocator;
        this.index = index;
    }
    // @todo: support nesting
    details() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const items = yield this.listLocator.locator('dt, dd').all();
            if (this.index < 0 || this.index >= items.length) {
                throw new Error('Invalid html');
            }
            // 1. Find the start of the <dt> group
            let groupStart = this.index;
            while (groupStart > 0 &&
                (yield items[groupStart - 1].evaluate((el) => el.tagName.toLowerCase())) === 'dt') {
                groupStart--;
            }
            // 2. Find the end of the <dt> group
            let groupEnd = this.index;
            while (groupEnd + 1 < items.length &&
                (yield (0, atoms_1.getLocatorTagName)(items[groupEnd + 1])) === 'dt') {
                groupEnd++;
            }
            // 3. Collect all <dd>s after the group
            const result = [];
            let i = groupEnd + 1;
            while (i < items.length && (yield (0, atoms_1.getLocatorTagName)(items[i])) === 'dd') {
                result.push(new atoms_1.TextElement(items[i]));
                i++;
            }
            return result;
        });
    }
}
exports.DescriptionTerm = DescriptionTerm;
class DescriptionList extends atoms_1.SimpleElement {
    constructor(locator) {
        super(locator);
    }
    terms() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (yield this.locator.locator('dt').all()).map((l, i) => new DescriptionTerm(l, this.locator, i));
        });
    }
    details() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (yield this.locator.locator('dd').all()).map((l) => new atoms_1.TextElement(l));
        });
    }
}
exports.DescriptionList = DescriptionList;
//# sourceMappingURL=description-list.js.map