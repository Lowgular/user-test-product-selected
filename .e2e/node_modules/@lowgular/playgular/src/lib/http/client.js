"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const tslib_1 = require("tslib");
const endpoint_1 = require("../endpoint");
class HttpClient {
    constructor(page) {
        this.page = page;
    }
    stubARequest(method, url, status, body) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield (0, endpoint_1.stubARequest)(this.page, {
                url,
                method,
                responseStub: {
                    status,
                    body,
                },
            });
        });
    }
    expectRequest(request, options, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield (0, endpoint_1.matchRequestAndExpectResponse)(this.page, request, options, response);
        });
    }
    expectGet(url, options, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.expectRequest({
                url,
                method: 'GET',
            }, options, response);
        });
    }
    expectPost(url, body, options, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.expectRequest({
                url,
                method: 'POST',
                body,
            }, options, response);
        });
    }
    expectPut(url_1, body_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function* (url, body, options = {}, response) {
            return yield this.expectRequest({
                url,
                method: 'PUT',
                body,
            }, options, response);
        });
    }
    expectPatch(url, body, options, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.expectRequest({
                url,
                method: 'PATCH',
                body,
            }, options, response);
        });
    }
    expectDelete(url, options, response) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.expectRequest({
                url,
                method: 'DELETE',
            }, options, response);
        });
    }
}
exports.HttpClient = HttpClient;
//# sourceMappingURL=client.js.map