"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CookieStorage = void 0;
const tslib_1 = require("tslib");
const test_1 = require("playwright/test");
const matchers_1 = require("../matchers");
class CookieStorage {
    constructor(browserContext, domain, path = '/') {
        this.browserContext = browserContext;
        this.domain = domain;
        this.path = path;
    }
    expectItemExists(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const cookies = yield this.browserContext.cookies();
            const cookieNames = cookies.map((c) => c.name);
            (0, test_1.expect)(cookieNames).toContain(key);
        });
    }
    expectItemsExist(keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const cookies = yield this.browserContext.cookies();
            const cookieNames = cookies.map((c) => c.name);
            (0, test_1.expect)(cookieNames).toEqual(test_1.expect.arrayContaining(keys));
        });
    }
    expectItems(items) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const keys = Object.keys(items);
            const cookies = yield this.browserContext.cookies();
            for (let i = 0; i < keys.length; i++) {
                const cookie = cookies.find((c) => c.name === keys[i]);
                (0, test_1.expect)(cookie === null || cookie === void 0 ? void 0 : cookie.value).toMatch((0, matchers_1.coerceRegexp)(items[keys[i]]));
            }
        });
    }
    stubItem(key, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.browserContext.addCookies([
                { name: key, value, path: this.path, domain: this.domain },
            ]);
        });
    }
    stubItems(items) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const cookies = Object.keys(items).map((key) => ({
                name: key,
                value: items[key],
                path: this.path,
                domain: this.domain,
            }));
            this.browserContext.addCookies(cookies);
        });
    }
}
exports.CookieStorage = CookieStorage;
//# sourceMappingURL=cookie-storage.js.map