"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectKeysAreNotIncludesInLocalStorage = exports.expectLocalStorageToHaveKeys = exports.expectIncludesInLocalStorage = exports.setLocalStorageData = exports.getLocalStorageData = exports.LocalStorage = void 0;
const tslib_1 = require("tslib");
const test_1 = require("@playwright/test");
const matchers_1 = require("../matchers");
class LocalStorage {
    constructor(page) {
        this.page = page;
    }
    stubItem(key, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, exports.setLocalStorageData)(this.page, { [key]: value });
        });
    }
    stubItems(items) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, exports.setLocalStorageData)(this.page, items);
        });
    }
    expectItemExists(key) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, exports.expectKeysAreNotIncludesInLocalStorage)(this.page, [key]);
        });
    }
    expectItemsExist(keys) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, exports.expectKeysAreNotIncludesInLocalStorage)(this.page, keys);
        });
    }
    expectItems(items) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = yield (0, exports.getLocalStorageData)(this.page);
            const keys = Object.keys(items);
            for (let i = 0; i < keys.length; i++) {
                (0, test_1.expect)(data[keys[i]]).toMatch((0, matchers_1.coerceRegexp)(items[keys[i]]));
            }
        });
    }
}
exports.LocalStorage = LocalStorage;
const getLocalStorageData = (page) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return yield page.evaluate(() => {
        const localStorageData = {};
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key) {
                localStorageData[key] = localStorage.getItem(key);
            }
        }
        return localStorageData;
    });
});
exports.getLocalStorageData = getLocalStorageData;
const setLocalStorageData = (page_1, ...args_1) => tslib_1.__awaiter(void 0, [page_1, ...args_1], void 0, function* (page, localStorageData = {}) {
    // await page.addInitScript()
    return yield page.addInitScript((localStorageData) => {
        Object.keys(localStorageData).forEach((key) => localStorage.setItem(key, localStorageData[key]));
    }, localStorageData);
});
exports.setLocalStorageData = setLocalStorageData;
const expectIncludesInLocalStorage = (page, expectedValues) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const localStorageData = yield (0, exports.getLocalStorageData)(page);
    (0, test_1.expect)(Object.entries(expectedValues).every(([key, value]) => localStorageData[key] === value)).toBeTruthy();
});
exports.expectIncludesInLocalStorage = expectIncludesInLocalStorage;
const expectLocalStorageToHaveKeys = (page, keys) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const localStorageData = yield (0, exports.getLocalStorageData)(page);
    (0, test_1.expect)(Object.keys(localStorageData)).toEqual(keys);
});
exports.expectLocalStorageToHaveKeys = expectLocalStorageToHaveKeys;
const expectKeysAreNotIncludesInLocalStorage = (page, keys) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const localStorageData = yield (0, exports.getLocalStorageData)(page);
    (0, test_1.expect)(keys.every((key) => key in localStorageData)).toBeFalsy();
});
exports.expectKeysAreNotIncludesInLocalStorage = expectKeysAreNotIncludesInLocalStorage;
//# sourceMappingURL=local-storage.js.map