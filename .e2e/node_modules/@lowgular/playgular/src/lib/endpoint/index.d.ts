import { Page } from '@playwright/test';
import { StringOrRegExp } from '../data';
import { HttpParams } from '../http';
export interface ResponseStub {
    status?: number;
    body?: any;
}
export interface Endpoint extends Request {
    responseStub?: ResponseStub;
}
export interface Request {
    readonly method: string;
    readonly url: StringOrRegExp;
    readonly body?: Record<string, unknown>;
    readonly query?: Record<string, StringOrRegExp>;
}
export interface RequestOptions {
    params?: HttpParams;
    headers?: Record<string, StringOrRegExp>;
}
export interface Response {
    readonly statusCode?: number;
    readonly body?: Record<string, unknown>;
}
export declare const makeNoContentResponseStub: () => ResponseStub;
export declare const makeOkResponseStub: (bodyStub: any) => ResponseStub;
export declare const makeCreatedResponseStub: (bodyStub: any) => ResponseStub;
export declare const makeUnauthorizedResponseStub: (bodyStub: any) => ResponseStub;
export declare const makeOkEndpoint: (request: Request, bodyStub: any) => Endpoint;
export declare const stubARequest: (page: Page, endpoint: Endpoint) => Promise<void>;
export declare const stubAllRequests: (page: Page, requestsWithStubs: Endpoint[]) => Promise<void>;
export declare const whenARequestHasCompleted: (page: Page, url: string, method: string) => Promise<void>;
export declare const stubAndWaitForResponse: (page: Page, responseStub: {
    data: unknown;
    meta: unknown;
}, request: {
    url: string;
    method: string;
}) => Promise<void>;
export declare const whenARequestHasFailure: (page: Page, url: string, method: string) => Promise<void>;
export declare const waitForAllResponses: (page: Page, requests: Request[]) => Promise<void>;
export declare const matchRequestAndExpectResponse: (page: Page, request: Request, options?: RequestOptions, response?: Response) => Promise<Response>;
